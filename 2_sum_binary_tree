# Definition for a  binary tree node
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    # @param A : root node of tree
    # @param B : integer
    # @return an integer
    def t2Sum(self, A, B):
        done = 0
        if A == None:
            done = 1
        my_stack = [A]
        my_stack_rev = [A]
        curr = A.left
        curr_rev = A.right
        rev = 0
        curr_val = None
        curr_rev_val = None
        while done == 0:
            if rev == 0: 
                if curr != None:
                    my_stack.append(curr)
                    curr = curr.left
                else:
                    if len(my_stack) != 0:
                        temp = my_stack[-1]
                        del my_stack[-1]
                        curr_val = temp.val
                        if curr_rev_val:
                            if curr_val + curr_rev_val == B:
                                if curr_val != curr_rev_val:
                                    return 1
                            elif curr_val + curr_rev_val > B:
                                rev = 1
                        else:
                            rev = 1
                        curr = temp.right
                    else:
                        done = 1
            else:
                if curr_rev != None:
                    my_stack_rev.append(curr_rev)
                    curr_rev = curr_rev.right
                else:
                    if len(my_stack_rev) != 0:
                        temp = my_stack_rev[-1]
                        del my_stack_rev[-1]
                        curr_rev_val = temp.val
                        if curr_val:
                            if curr_val + curr_rev_val == B:
                                if curr_val != curr_rev_val:
                                    return 1
                            elif curr_val + curr_rev_val < B:
                                rev = 0
                        else:
                            rev = 0
                        curr_rev = temp.left
                    else:
                        done = 1
                
        return 0
