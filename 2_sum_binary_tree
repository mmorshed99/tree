The solution discussed below takes O(n) time, O(Logn) space and doesnâ€™t modify BST. The idea is same as finding the pair in 
sorted array (See method 1 of this for details). We traverse BST in Normal Inorder and Reverse Inorder simultaneously. 
In reverse inorder, we start from the rightmost node which is the maximum value node. In normal inorder, we start from the 
left most node which is minimum value node. We add sum of current nodes in both traversals and compare this sum with given 
target sum. If the sum is same as target sum, we return true. If the sum is more than target sum, we move to next node in r
everse inorder traversal, otherwise we move to next node in normal inorder traversal. If any of the traversals is finished 
without finding a pair, we return false.
